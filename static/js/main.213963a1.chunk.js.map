{"version":3,"sources":["WBalkans.png","App.js","reportWebVitals.js","index.js"],"names":["App","useState","data","setData","width","setWidth","adata","setAdata","getData","a","axios","get","response","console","log","useEffect","window","screen","newfilter","map","item","name","todayDeaths","today","deaths","todayConfirmed","confirmed","totalDeaths","latest_data","totalConfirmed","totalRecovered","recovered","deathRate","parseFloat","calculated","death_rate","toFixed","perMillion","cases_per_million_population","filter","Fragment","className","style","backgroundImage","backgroundImg","height","strokeDasharray","dataKey","type","domain","fill","zIndex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.213963a1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/WBalkans.515828ff.png\";","import React, { useEffect, useState } from \"react\";\nimport {\n  BarChart,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  Bar,\n} from \"recharts\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport backgroundImg from \"./WBalkans.png\";\nconst App = () => {\n  const [data, setData] = useState(null);\n  const [width, setWidth] = useState(400);\n  const [adata, setAdata] = useState([]);\n  const getData = async () => {\n    try {\n      const response = await axios.get(\"https://corona-api.com/countries\");\n      setData(response);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  useEffect(() => {\n    setWidth(window.screen.width);\n  }, [width]);\n  useEffect(() => {\n    getData();\n  }, []);\n\n  useEffect(() => {\n    if (data != null) {\n      let fdata = data.data.data;\n      const forChart = fdata.map((item) => {\n        if (\n          item.name === \"Albania\" ||\n          item.name === \"Bosnia and Herzegovina\" ||\n          item.name === \"Serbia\" ||\n          item.name === \"Montenegro\" ||\n          item.name === \"North Macedonia\"\n        )\n          return {\n            name: item.name,\n            todayDeaths: item.today.deaths,\n            todayConfirmed: item.today.confirmed,\n            totalDeaths: item.latest_data.deaths,\n            totalConfirmed: item.latest_data.confirmed,\n            totalRecovered: item.latest_data.recovered,\n            deathRate: parseFloat(item.latest_data.calculated.death_rate.toFixed(3)),\n            perMillion:\n              item.latest_data.calculated.cases_per_million_population,\n          };\n        else return null;\n      });\n      const newfilter = forChart.filter((item) => item);\n      setAdata(newfilter);\n      // setUdata(thedata);\n    }\n  }, [data]);\n\n  return (\n    <React.Fragment>\n      <div\n        className=\"background\"\n        style={{ backgroundImage: `url('${backgroundImg}')` }}\n      ></div>\n\n      {/*  APPP ORIGINAl*/}\n      <div className=\"App\">\n        <h1 className=\"title\">Western Balkans COVID-19 data</h1>\n        <div className=\"graph\">\n          <div className=\"graphbg\" />\n          <h1>Today's data*</h1>\n          <BarChart width={800} height={300} data={adata}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis type=\"number\" domain={[0, \"dataMax\"]} />\n            <Tooltip />\n            <Legend />\n            <Bar\n              dataKey=\"todayConfirmed\"\n              fill=\"#1b78e3\"\n              name={\"Confirmed cases\"}\n            />\n            <Bar dataKey=\"todayDeaths\" fill=\"#e31b1b\" name={\"Deaths \"} />\n          </BarChart>\n        </div>\n        <div className=\"graph\">\n          <h1 style={{ zIndex: \"100\" }}>Total cases and recovered</h1>\n          <div className=\"graphbg\" />\n          <BarChart width={800} height={300} data={adata}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" />\n            {/* ticks={[\"Albanija\",\"BiH\",\"Hrvatska\",\"Srbija\",\"Crna Gora\",\"S.Makedonija\"]} */}\n            <YAxis type=\"number\" domain={[0, \"dataMax\"]} />\n            <Tooltip />\n            <Legend />\n            <Bar\n              dataKey=\"totalConfirmed\"\n              name={\"Confirmed cases\"}\n              fill=\"#1b78e3\"\n            />\n            <Bar\n              dataKey=\"totalRecovered\"\n              name={\"Number of recovered\"}\n              fill=\"#82ca9d\"\n            />\n          </BarChart>\n        </div>\n        <div className=\"graph\">\n          <div className=\"graphbg\" />\n          <h1>Number of cases per 1.000.000* </h1>\n          <BarChart width={800} height={300} data={adata}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis type=\"number\" domain={[0, 5]} />\n            <Tooltip />\n            <Legend />\n            <Bar dataKey=\"perMillion\" fill=\"#1b78e3\" name={\"Cases per 1M\"} />\n          </BarChart>\n        </div>\n        <div className=\"graph\">\n          <div className=\"graphbg\" />\n          <h1>Total Deaths</h1>\n          <BarChart width={800} height={300} data={adata}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis type=\"number\" domain={[0, \"dataMax\"]} />\n            <Tooltip />\n            <Legend />\n            <Bar dataKey=\"totalDeaths\" fill=\"#e31b1b\" name={\"Total deaths\"} />\n          </BarChart>\n        </div>\n\n        <div className=\"graph\">\n          <div className=\"graphbg\" />\n          <h1>Death rate in %</h1>\n          <BarChart width={800} height={300} data={adata}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis type=\"number\" domain={[0, 5]} />\n            <Tooltip />\n            <Legend />\n            <Bar dataKey=\"deathRate\" fill=\"#e31b1b\" name={\"Death rate in %\"} />\n          </BarChart>\n        </div>\n      </div>\n      {/*  APPP MMM/////////////////////////////////////////////////////////*/}\n      <div className=\"App-M\">\n        <h1 className=\"title-m\">Western Balkans COVID-19 data</h1>\n        <div className=\"graph\">\n          <div className=\"graphbg\" />\n          <h1>Today's data*</h1>\n          <BarChart width={800} height={300} data={adata}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis type=\"number\" domain={[0, \"dataMax\"]} />\n            <Tooltip />\n            <Legend />\n            <Bar\n              dataKey=\"todayConfirmed\"\n              fill=\"#1b78e3\"\n              name={\"Confirmed cases\"}\n            />\n            <Bar dataKey=\"todayDeaths\" fill=\"#e31b1b\" name={\"Deaths \"} />\n          </BarChart>\n        </div>\n        <div className=\"graph\">\n          <h1 style={{ zIndex: \"100\" }}>Total cases and recovered</h1>\n          <div className=\"graphbg\" />\n          <BarChart width={800} height={300} data={adata}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" />\n            {/* ticks={[\"Albanija\",\"BiH\",\"Hrvatska\",\"Srbija\",\"Crna Gora\",\"S.Makedonija\"]} */}\n            <YAxis type=\"number\" domain={[0, \"dataMax\"]} />\n            <Tooltip />\n            <Legend />\n            <Bar\n              dataKey=\"totalConfirmed\"\n              name={\"Confirmed cases\"}\n              fill=\"#1b78e3\"\n            />\n            <Bar\n              dataKey=\"totalRecovered\"\n              name={\"Number of recovered\"}\n              fill=\"#82ca9d\"\n            />\n          </BarChart>\n        </div>\n        <div className=\"graph\">\n          <div className=\"graphbg\" />\n          <h1>Number of cases per 1.000.000* </h1>\n          <BarChart width={800} height={300} data={adata}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis type=\"number\" domain={[0, 5]} />\n            <Tooltip />\n            <Legend />\n            <Bar dataKey=\"perMillion\" fill=\"#1b78e3\" name={\"Cases per 1M\"} />\n          </BarChart>\n        </div>\n        <div className=\"graph\">\n          <div className=\"graphbg\" />\n          <h1>Total Deaths</h1>\n          <BarChart width={800} height={300} data={adata}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis type=\"number\" domain={[0, \"dataMax\"]} />\n            <Tooltip />\n            <Legend />\n            <Bar dataKey=\"totalDeaths\" fill=\"#e31b1b\" name={\"Total deaths\"} />\n          </BarChart>\n        </div>\n\n        <div className=\"graph\">\n          <div className=\"graphbg\" />\n          <h1>Death rate in %</h1>\n          <BarChart width={800} height={300} data={adata}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis type=\"number\" domain={[0, 5]} />\n            <Tooltip />\n            <Legend />\n            <Bar dataKey=\"deathRate\" fill=\"#e31b1b\" name={\"Death rate in %\"} />\n          </BarChart>\n        </div>\n      </div>\n      {/*  APPP SSSSSSSS///////////////////////////////////////////////*/}\n      <div className=\"App-S\">\n        <h1 className=\"title-s\">Western Balkans COVID-19 data</h1>\n        <div className=\"graph-s\">\n          <div className=\"graphbg-s\" />\n          <h1 className=\"subtitle-s\">Today's data*</h1>\n          <BarChart width={300} height={220} data={adata}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis type=\"number\" domain={[0, \"dataMax\"]} />\n            <Tooltip />\n            <Legend />\n            <Bar\n              dataKey=\"todayConfirmed\"\n              fill=\"#1b78e3\"\n              name={\"Confirmed cases\"}\n            />\n            <Bar dataKey=\"todayDeaths\" fill=\"#e31b1b\" name={\"Deaths \"} />\n          </BarChart>\n        </div>\n        <div className=\"graph-s\">\n          <h1 className=\"subtitle-s\" style={{ zIndex: \"100\" }}>\n            Total cases and recovered\n          </h1>\n          <div className=\"graphbg-s\" />\n          <BarChart width={300} height={220} data={adata}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" />\n            {/* ticks={[\"Albanija\",\"BiH\",\"Hrvatska\",\"Srbija\",\"Crna Gora\",\"S.Makedonija\"]} */}\n            <YAxis type=\"number\" domain={[0, \"dataMax\"]} />\n            <Tooltip />\n            <Legend />\n            <Bar\n              dataKey=\"totalConfirmed\"\n              name={\"Confirmed cases\"}\n              fill=\"#1b78e3\"\n            />\n            <Bar\n              dataKey=\"totalRecovered\"\n              name={\"Number of recovered\"}\n              fill=\"#82ca9d\"\n            />\n          </BarChart>\n        </div>\n        <div className=\"graph-s\">\n          <div className=\"graphbg-s\" />\n          <h1 className=\"subtitle-s\">Number of cases per 1.000.000* </h1>\n          <BarChart width={300} height={200} data={adata}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis type=\"number\" domain={[0, 5]} />\n            <Tooltip />\n            <Legend />\n            <Bar dataKey=\"perMillion\" fill=\"#1b78e3\" name={\"Cases per 1M\"} />\n          </BarChart>\n        </div>\n        <div className=\"graph-s\">\n          <div className=\"graphbg-s\" />\n          <h1 className=\"subtitle-s\">Total Deaths</h1>\n          <BarChart width={300} height={220} data={adata}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis type=\"number\" domain={[0, \"dataMax\"]} />\n            <Tooltip />\n            <Legend />\n            <Bar dataKey=\"totalDeaths\" fill=\"#e31b1b\" name={\"Total deaths\"} />\n          </BarChart>\n        </div>\n\n        <div className=\"graph-s\">\n          <div className=\"graphbg-s\" />\n          <h1 className=\"subtitle-s\">Death rate in %</h1>\n          <BarChart width={300} height={220} data={adata}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis type=\"number\" domain={[0, 5]} />\n            <Tooltip />\n            <Legend />\n            <Bar dataKey=\"deathRate\" fill=\"#e31b1b\" name={\"Death rate in %\"} />\n          </BarChart>\n        </div>\n      </div>\n      <p className=\"msg\">\n        All data is provided by :https://corona-api.com/countries{\" \"}\n      </p>\n      <p className=\"msg\">\n        0 usually means lack of data or outdated data ,data updates at 3 p.m.\n        CET +1 *\n      </p>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n\n// const thedata = fdata.map((item) => (\n//   <div>\n//     <p>Name:{item.name}</p>\n//     <p>Deaths today:{item.today.deaths}</p>\n//     <p>Confirmed today:{item.today.confirmed}</p>\n//     <p>Deaths total:{item.latest_data.deaths}</p>\n//     <p>Confirmed total:{item.latest_data.confirmed}</p>\n//     <p>Recovered total:{item.latest_data.recovered}</p>\n//     <p>Death rate:{item.latest_data.calculated.death_rate}%</p>\n//   </div>\n// ));\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}